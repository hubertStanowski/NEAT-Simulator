import React, { useState, useEffect, useCallback } from "react";

const createGrid = (
  rows: number,
  cols: number,
): [number, number, number][][] => {
  return Array.from({ length: rows }, () =>
    Array.from({ length: cols }, () => [0, 0, 0]),
  );
};

const updateGridCell = (
  grid: [number, number, number][][],
  row: number,
  col: number,
  color: [number, number, number],
) => {
  const newGrid = grid.map((rowArr, rowIndex) =>
    rowArr.map((cell, cellIndex) =>
      rowIndex === row && cellIndex === col ? color : cell,
    ),
  );
  return newGrid;
};

const Canvas = () => {
  const [grid, setGrid] = useState<[number, number, number][][]>([]);
  const [snake, setSnake] = useState<{ row: number; col: number }[]>([
    { row: 12, col: 12 },
  ]);
  const [direction, setDirection] = useState<"UP" | "DOWN" | "LEFT" | "RIGHT">(
    "RIGHT",
  );
  const [food, setFood] = useState<{ row: number; col: number }>({
    row: 5,
    col: 5,
  });

  useEffect(() => {
    const newGrid = createGrid(25, 25);
    setGrid(newGrid);
  }, []);

  const moveSnake = useCallback(() => {
    setSnake((prevSnake) => {
      const newSnake = [...prevSnake];
      const head = newSnake[0];
      let newHead;

      switch (direction) {
        case "UP":
          newHead = { row: head.row - 1, col: head.col };
          break;
        case "DOWN":
          newHead = { row: head.row + 1, col: head.col };
          break;
        case "LEFT":
          newHead = { row: head.row, col: head.col - 1 };
          break;
        case "RIGHT":
          newHead = { row: head.row, col: head.col + 1 };
          break;
      }

      newSnake.unshift(newHead);
      if (newHead.row === food.row && newHead.col === food.col) {
        setFood({
          row: Math.floor(Math.random() * 25),
          col: Math.floor(Math.random() * 25),
        });
      } else {
        newSnake.pop();
      }

      return newSnake;
    });
  }, [direction, food]);

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      switch (e.key) {
        case "ArrowUp":
          if (direction !== "DOWN") setDirection("UP");
          break;
        case "ArrowDown":
          if (direction !== "UP") setDirection("DOWN");
          break;
        case "ArrowLeft":
          if (direction !== "RIGHT") setDirection("LEFT");
          break;
        case "ArrowRight":
          if (direction !== "LEFT") setDirection("RIGHT");
          break;
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [direction]);

  useEffect(() => {
    const interval = setInterval(() => {
      moveSnake();
    }, 50); // Decreased interval duration to increase speed

    return () => clearInterval(interval);
  }, [moveSnake]);

  useEffect(() => {
    const newGrid = createGrid(25, 25);
    snake.forEach((segment) => {
      newGrid[segment.row][segment.col] = [0, 255, 0];
    });
    newGrid[food.row][food.col] = [255, 0, 0];
    setGrid(newGrid);
  }, [snake, food]);

  return (
    <div className="grid-cols-25 grid-rows-25 grid h-full w-full">
      {grid.map((row, rowIndex) => (
        <div key={`row-${rowIndex}`} className="col-span-25 row-span-1 flex">
          {row.map((cell, cellIndex) => (
            <div
              key={`${rowIndex}-${cellIndex}`}
              style={{
                backgroundColor: `rgb(${cell[0]}, ${cell[1]}, ${cell[2]})`,
              }}
              className="aspect-1 col-span-1 row-span-1 flex-1 border-[0.01px] border-neutral-400"
            ></div>
          ))}
        </div>
      ))}
    </div>
  );
};

export default Canvas;
